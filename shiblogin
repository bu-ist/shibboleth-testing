#!/usr/bin/env python3
#
# Command line shiblogin tester
# 
#
import os
import sys
from selenium import webdriver
import argparse

# ####
# Routine to determine a value for an argument
#
# The precedent order for arguments are:
# 1) command line arguments
# 2) environment variables
# 3) built-in defaults
#
# So --landscape takes precedence over the LANDSCAPE environment variable.
#
def get_argument (env_name, arg_value, landscape_value):
    if arg_value:
        return(arg_value)
    else:
        return(os.environ.get(env_name, landscape_value))

def main ():
    # process our command line arguments 
    #
    parser = argparse.ArgumentParser(description='Test Shibboleth authentication using Selenium')
    parser.add_argument('--landscape', type=str, default='prod')
    parser.add_argument('--host', default=None, type=str, help="Shibboleth IdP hostname")
    parser.add_argument('--sp', default=None, type=str, help="SP entity-ID to test")
    parser.add_argument('--pwfile', default=None, type=str, help="JSON file contains passwords")
    parser.add_argument('--verbose', action='store_true', help='Verbose output')

    args = parser.parse_args()

    # ####
    # Determine our landscape first and use that to determine the appropriate defaults
    landscape = get_argument('LANDSCAPE', args.landscape, 'prod')
    default_sp_is_verify = True
    if landscape == 'syst':
        default_sp = 'http%3A%2F%2Fist-shib-verify-syst.bu.edu%2Fshibboleth'
        #default_sp = 'http://ist-shib-verify-syst.bu.edu/shibboleth'
        #default_sp = 'bostonuniversity.policytech.com'
        #default_sp = 'https://learn.bu.edu/shibboleth-sp'
        default_host = "shib-syst.bu.edu"
        default_sp_is_verify = False
    elif landscape == 'test':
        default_sp = 'http://ist-shib-verify-syst.bu.edu/shibboleth'
        default_host = "shib-test.bu.edu"
    elif landscape == 'prod':
        default_sp = 'http://ist-shib-verify-prod.bu.edu/shibboleth'
        default_sp = str('http%%3A%%2F%%2Fist-shib-verify-%s.bu.edu%%2Fshibboleth' % landscape)
        default_host = 'shib.bu.edu'
    else:
        default_sp = str('http%%3A%%2F%%2Fist-shib-verify-%s.bu.edu%%2Fshibboleth' % landscape)
        default_host = 'shib-%s.bu.edu' % landscape

    # now we determine our other defaults
    #
    shib_host = get_argument('SHIB_HOST', args.host, default_host)
    shib_path = os.environ.get('SHIB_PATH', 'idp/profile/SAML2/Unsolicited/SSO?providerId')
    shib_sp = get_argument('SHIB_SP', args.sp, default_sp)
    sp_is_verify = default_sp_is_verify if shib_sp == default_sp else False 

    # Get defaults from the json file
    try:
        import json
        fname = get_argument('SHIB_PW_FILE', args.pwfile, "~/.bupw.json")
        pwdict = json.loads(open(os.path.expanduser(fname)).read())
    except:
        pwdict = { 'default': { 'user': "baduser", 'pw': 'badpw' } }

    if landscape in pwdict:
        pwentry = pwdict[landscape]
    else:
        pwentry = pwdict['default']

    # ####
    # Set up Selenium for testing and wait for it to be ready
    #
    try:
        caps = webdriver.DesiredCapabilities.CHROME
        caps['acceptInsecureCerts'] = True
        selenium_host = os.environ.get("SELENIUM_SERVER", "localhost")
        driver = webdriver.Remote(
            desired_capabilities=caps,
            command_executor="http://%s:4444/wd/hub" % selenium_host
        )
        driver.implicitly_wait(10)
    except Exception as e:
        print("ERROR: selenium_setup - %s" % str(e) )
        sys.exit(2)

    # #### 
    # Now we test Shibboleth login
    #
    startURL = "https://%s/%s=%s" % (shib_host, shib_path, shib_sp)
    if args.verbose:
        print("start_url: %s" % startURL)

    try:
        driver.get(startURL)
    except Exception as e:
        print("ERROR: start- %s" % str(e) )
        sys.exit(2)

    # we wrap the whole thing in a try block to get more debugging info if there's a failure
    try:

        assert driver.title == 'Boston University | Login'

        # look for the username/password prompt and fill it
        user_field = driver.find_element_by_id('j_username')
        user_field.clear()
        user_field.send_keys(pwentry['user'])
        password_field = driver.find_element_by_id('j_password')
        password_field.clear()
        password_field.send_keys(pwentry['pw'])
        login_button = driver.find_element_by_class_name('input-submit')
        login_button.click()


        # if the authentication worked then we shouldn't be on the login page
        assert driver.title != 'Boston University | Login'

        # the default_sp (verify nodes) put the username in the title which is a simple
        # check that authentication worked and got the correct username
        if sp_is_verify:
            assert pwentry['user'] in driver.title
        
        # Standard nagios output
        print("OK: Validated %s IdP using %s SP Entity-ID" % (shib_host, shib_sp) )
        return(0)

    except:
        print("ERROR: login- %s" % get_error_text(driver))
        sys.exit(2)
        #print("ERROR: title='%s' error=%s" % (driver.title, get_error_text(driver)))
        #driver.get_screenshot_as_file('./images/state.png')
        #print("ERROR: title='%s' image dumped" % driver.title)
        #raise
    finally:
        driver.close()


# ####
# Function to pull error test we want from a page.
#
def get_error_text(driver):
    # AWS WAF Forbidden page has a special title
    if driver.title == '403 Forbidden':
        return("ALB WAF blocked the request")

    # bunch of different ways to get error text
    # neterror - Chrome network error
    # error-box - Shibboleth IdP login error
    # content - Shibboleth low-level error
    #
    for examine in ('neterror', 'error-box', 'error-code', 'content'):
        try:
            return(driver.find_element_by_class_name(examine).text)
        except:
            pass
    
    # fall back to the page source - if this happens we should save a screenshot
    driver.get_screenshot_as_file('./error.png')
    return(driver.page_source)


        #print("**** cookies ****")
        #print(driver.get_cookies())

        #driver.get_screenshot_as_file("./images/state.png")

        #for ltype in ( 'browser', 'driver', 'client', 'server'):
        #    print("**** %s ****" % ltype)
        #    try:
        #        print(driver.get_log(ltype))
        #    except: 
        #        print("<No logs found>")

    #Testing Single Input Field.    
    # def test_singleInputField(self):
    #     pageUrl = "http://www.seleniumeasy.com/test/basic-first-form-demo.html"
    #     driver=self.driver
    #     driver.get(pageUrl)

        # #Finding "Single input form" input text field by id. And sending keys(entering data) in it.
        # eleUserMessage = driver.find_element_by_id("user-message")
        # eleUserMessage.clear()
        # eleUserMessage.send_keys("Test Python")

        # #Finding "Show Your Message" button element by css selector using both id and class name. And clicking it.
        # eleShowMsgBtn=driver.find_element_by_css_selector('#get-input > .btn')
        # eleShowMsgBtn.click()

        # #Checking whether the input text and output text are same using assertion.
        # eleYourMsg=driver.find_element_by_id("display")
        # assert "Test Python" in eleYourMsg.text
 
    # Closing the browser.
#    def tearDown(self):
#        self.driver.close()

# This line sets the variable “__name__” to have a value “__main__”.
# If this file is being imported from another module then “__name__” will be set to the other module's name.
if __name__ == "__main__":
    main()
